
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaAND ASSIGN BEGIN DECREMENT DIVIDE ELSE END EQ FOR FUNCTION GE GT ID IF INCREMENT INTEGER JUNGLE_DIFF LBRACKET LE LT MINUS NUMBER NUMBER_REAL OR PLC PLUS RBRACKET READ RETURN SEMICOLON STRING THEN TIMES VAR WHILE WRITE\n    programa : plc\n    \n    plc : PLC ID VAR declaracoes BEGIN comandos END\n    declaracoes : declaracao \n                | declaracoes declaracao\n    declaracao : ID SEMICOLON\n               | ID EQ INTEGER SEMICOLON \n               | ID EQ leitura\n    \n    comandos : comando\n             | comandos comando\n    \n    comando : atribuicao\n            | escrita\n            | selecao\n            | repeticao\n    \n    leitura : READ LBRACKET texto RBRACKET SEMICOLON\n    \n    atribuicao : ID ASSIGN expressao SEMICOLON\n    \n    atribuicao : ID ASSIGN leitura SEMICOLON\n    \n    escrita : WRITE LBRACKET argumento RBRACKET SEMICOLON\n    \n    argumento : texto\n    \n    argumento : expressao\n    \n    texto : \'"\' STRING \'"\'\n    \n    expressao : termo\n              | expressao PLUS termo\n              | expressao MINUS termo\n    termo : fator \n          | termo TIMES fator\n          | termo DIVIDE fator\n    fator : ID\n          | NUMBER \n          | LBRACKET expressao RBRACKET\n    selecao : IF condicao \':\' comandos END\n            | IF condicao \':\' comandos ELSE comandos END\n    repeticao : FOR LBRACKET declaracao SEMICOLON condicao SEMICOLON incrementacao RBRACKET \':\' comando END\n    \n    repeticao : WHILE LBRACKET condicao RBRACKET \':\' comandos END\n    \n    incrementacao : ID INCREMENT\n                  | ID DECREMENT\n                  |\n    \n    condicao : expressao operador expressao\n    \n    operador  : GT\n              | LT \n              | GE \n              | LE \n              | EQ \n              | JUNGLE_DIFF\n              | OR\n              | AND\n    \n    funcao : FUNCTION ID INTEGER BEGIN comandos RETURN expressao SEMICOLON ENDfator : ID LBRACKET RBRACKET'
    
_lr_action_items = {'PLC':([0,],[3,]),'$end':([1,2,30,],[0,-1,-2,]),'ID':([3,5,7,8,9,11,12,14,17,18,19,20,21,22,24,27,29,31,32,39,40,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,70,72,80,82,84,85,86,88,89,90,91,92,95,99,101,],[4,6,6,-3,-5,16,-4,-7,16,-8,-10,-11,-12,-13,37,-6,37,-9,37,37,6,37,16,37,37,37,-38,-39,-40,-41,-42,-43,-44,-45,37,37,-15,-16,16,37,-14,-17,-30,16,16,16,94,16,-31,-33,16,-32,]),'VAR':([4,],[5,]),'SEMICOLON':([6,9,13,14,27,35,36,37,38,44,45,65,67,71,73,74,75,76,77,78,79,82,87,],[9,-5,27,-7,-6,-21,-24,-27,-28,69,70,80,82,84,-37,-22,-23,-25,-26,-47,-29,-14,90,]),'EQ':([6,34,35,36,37,38,74,75,76,77,78,79,],[10,57,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'BEGIN':([7,8,9,12,14,27,82,],[11,-3,-5,-4,-7,-6,-14,]),'INTEGER':([10,],[13,]),'READ':([10,29,],[15,15,]),'WRITE':([11,17,18,19,20,21,22,31,49,69,70,72,84,85,86,88,89,91,92,95,99,101,],[23,23,-8,-10,-11,-12,-13,-9,23,-15,-16,23,-17,-30,23,23,23,23,-31,-33,23,-32,]),'IF':([11,17,18,19,20,21,22,31,49,69,70,72,84,85,86,88,89,91,92,95,99,101,],[24,24,-8,-10,-11,-12,-13,-9,24,-15,-16,24,-17,-30,24,24,24,24,-31,-33,24,-32,]),'FOR':([11,17,18,19,20,21,22,31,49,69,70,72,84,85,86,88,89,91,92,95,99,101,],[25,25,-8,-10,-11,-12,-13,-9,25,-15,-16,25,-17,-30,25,25,25,25,-31,-33,25,-32,]),'WHILE':([11,17,18,19,20,21,22,31,49,69,70,72,84,85,86,88,89,91,92,95,99,101,],[26,26,-8,-10,-11,-12,-13,-9,26,-15,-16,26,-17,-30,26,26,26,26,-31,-33,26,-32,]),'LBRACKET':([15,23,24,25,26,29,32,37,39,41,50,51,52,53,54,55,56,57,58,59,60,61,62,80,],[28,32,39,40,41,39,39,63,39,39,39,39,39,-38,-39,-40,-41,-42,-43,-44,-45,39,39,39,]),'ASSIGN':([16,],[29,]),'END':([17,18,19,20,21,22,31,69,70,72,84,85,89,91,92,95,100,101,],[30,-8,-10,-11,-12,-13,-9,-15,-16,85,-17,-30,92,95,-31,-33,101,-32,]),'ELSE':([18,19,20,21,22,31,69,70,72,84,85,92,95,101,],[-8,-10,-11,-12,-13,-9,-15,-16,86,-17,-30,-31,-33,-32,]),'NUMBER':([24,29,32,39,41,50,51,52,53,54,55,56,57,58,59,60,61,62,80,],[38,38,38,38,38,38,38,38,-38,-39,-40,-41,-42,-43,-44,-45,38,38,38,]),'"':([28,32,68,],[43,43,83,]),':':([33,35,36,37,38,73,74,75,76,77,78,79,81,96,],[49,-21,-24,-27,-28,-37,-22,-23,-25,-26,-47,-29,88,99,]),'PLUS':([34,35,36,37,38,44,48,64,73,74,75,76,77,78,79,],[51,-21,-24,-27,-28,51,51,51,51,-22,-23,-25,-26,-47,-29,]),'MINUS':([34,35,36,37,38,44,48,64,73,74,75,76,77,78,79,],[52,-21,-24,-27,-28,52,52,52,52,-22,-23,-25,-26,-47,-29,]),'GT':([34,35,36,37,38,74,75,76,77,78,79,],[53,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'LT':([34,35,36,37,38,74,75,76,77,78,79,],[54,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'GE':([34,35,36,37,38,74,75,76,77,78,79,],[55,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'LE':([34,35,36,37,38,74,75,76,77,78,79,],[56,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'JUNGLE_DIFF':([34,35,36,37,38,74,75,76,77,78,79,],[58,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'OR':([34,35,36,37,38,74,75,76,77,78,79,],[59,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'AND':([34,35,36,37,38,74,75,76,77,78,79,],[60,-21,-24,-27,-28,-22,-23,-25,-26,-47,-29,]),'RBRACKET':([35,36,37,38,42,46,47,48,63,64,66,73,74,75,76,77,78,79,83,90,93,97,98,],[-21,-24,-27,-28,67,71,-18,-19,78,79,81,-37,-22,-23,-25,-26,-47,-29,-20,-36,96,-34,-35,]),'TIMES':([35,36,37,38,74,75,76,77,78,79,],[61,-24,-27,-28,61,61,-25,-26,-47,-29,]),'DIVIDE':([35,36,37,38,74,75,76,77,78,79,],[62,-24,-27,-28,62,62,-25,-26,-47,-29,]),'STRING':([43,],[68,]),'INCREMENT':([94,],[97,]),'DECREMENT':([94,],[98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'plc':([0,],[2,]),'declaracoes':([5,],[7,]),'declaracao':([5,7,40,],[8,12,65,]),'leitura':([10,29,],[14,45,]),'comandos':([11,49,86,88,],[17,72,89,91,]),'comando':([11,17,49,72,86,88,89,91,99,],[18,31,18,31,18,18,31,31,100,]),'atribuicao':([11,17,49,72,86,88,89,91,99,],[19,19,19,19,19,19,19,19,19,]),'escrita':([11,17,49,72,86,88,89,91,99,],[20,20,20,20,20,20,20,20,20,]),'selecao':([11,17,49,72,86,88,89,91,99,],[21,21,21,21,21,21,21,21,21,]),'repeticao':([11,17,49,72,86,88,89,91,99,],[22,22,22,22,22,22,22,22,22,]),'condicao':([24,41,80,],[33,66,87,]),'expressao':([24,29,32,39,41,50,80,],[34,44,48,64,34,73,34,]),'termo':([24,29,32,39,41,50,51,52,80,],[35,35,35,35,35,35,74,75,35,]),'fator':([24,29,32,39,41,50,51,52,61,62,80,],[36,36,36,36,36,36,36,36,76,77,36,]),'texto':([28,32,],[42,47,]),'argumento':([32,],[46,]),'operador':([34,],[50,]),'incrementacao':([90,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> plc','programa',1,'p_programa','parser.py',20),
  ('plc -> PLC ID VAR declaracoes BEGIN comandos END','plc',7,'p_plc','parser.py',26),
  ('declaracoes -> declaracao','declaracoes',1,'p_declaracoes','parser.py',32),
  ('declaracoes -> declaracoes declaracao','declaracoes',2,'p_declaracoes','parser.py',33),
  ('declaracao -> ID SEMICOLON','declaracao',2,'p_declaracao','parser.py',41),
  ('declaracao -> ID EQ INTEGER SEMICOLON','declaracao',4,'p_declaracao','parser.py',42),
  ('declaracao -> ID EQ leitura','declaracao',3,'p_declaracao','parser.py',43),
  ('comandos -> comando','comandos',1,'p_comandos','parser.py',55),
  ('comandos -> comandos comando','comandos',2,'p_comandos','parser.py',56),
  ('comando -> atribuicao','comando',1,'p_comando','parser.py',62),
  ('comando -> escrita','comando',1,'p_comando','parser.py',63),
  ('comando -> selecao','comando',1,'p_comando','parser.py',64),
  ('comando -> repeticao','comando',1,'p_comando','parser.py',65),
  ('leitura -> READ LBRACKET texto RBRACKET SEMICOLON','leitura',5,'p_leitura','parser.py',71),
  ('atribuicao -> ID ASSIGN expressao SEMICOLON','atribuicao',4,'p_atribuicao_expr','parser.py',79),
  ('atribuicao -> ID ASSIGN leitura SEMICOLON','atribuicao',4,'p_atribuicao_leit','parser.py',89),
  ('escrita -> WRITE LBRACKET argumento RBRACKET SEMICOLON','escrita',5,'p_escrita','parser.py',99),
  ('argumento -> texto','argumento',1,'p_argumento_texto','parser.py',105),
  ('argumento -> expressao','argumento',1,'p_argumento_expr','parser.py',111),
  ('texto -> " STRING "','texto',3,'p_texto','parser.py',117),
  ('expressao -> termo','expressao',1,'p_expressao','parser.py',129),
  ('expressao -> expressao PLUS termo','expressao',3,'p_expressao','parser.py',130),
  ('expressao -> expressao MINUS termo','expressao',3,'p_expressao','parser.py',131),
  ('termo -> fator','termo',1,'p_termo','parser.py',141),
  ('termo -> termo TIMES fator','termo',3,'p_termo','parser.py',142),
  ('termo -> termo DIVIDE fator','termo',3,'p_termo','parser.py',143),
  ('fator -> ID','fator',1,'p_fator','parser.py',153),
  ('fator -> NUMBER','fator',1,'p_fator','parser.py',154),
  ('fator -> LBRACKET expressao RBRACKET','fator',3,'p_fator','parser.py',155),
  ('selecao -> IF condicao : comandos END','selecao',5,'p_selecao','parser.py',165),
  ('selecao -> IF condicao : comandos ELSE comandos END','selecao',7,'p_selecao','parser.py',166),
  ('repeticao -> FOR LBRACKET declaracao SEMICOLON condicao SEMICOLON incrementacao RBRACKET : comando END','repeticao',11,'p_repeticao_for','parser.py',193),
  ('repeticao -> WHILE LBRACKET condicao RBRACKET : comandos END','repeticao',7,'p_repeticao_while','parser.py',202),
  ('incrementacao -> ID INCREMENT','incrementacao',2,'p_incrementacao','parser.py',215),
  ('incrementacao -> ID DECREMENT','incrementacao',2,'p_incrementacao','parser.py',216),
  ('incrementacao -> <empty>','incrementacao',0,'p_incrementacao','parser.py',217),
  ('condicao -> expressao operador expressao','condicao',3,'p_condicao','parser.py',223),
  ('operador -> GT','operador',1,'p_operador','parser.py',240),
  ('operador -> LT','operador',1,'p_operador','parser.py',241),
  ('operador -> GE','operador',1,'p_operador','parser.py',242),
  ('operador -> LE','operador',1,'p_operador','parser.py',243),
  ('operador -> EQ','operador',1,'p_operador','parser.py',244),
  ('operador -> JUNGLE_DIFF','operador',1,'p_operador','parser.py',245),
  ('operador -> OR','operador',1,'p_operador','parser.py',246),
  ('operador -> AND','operador',1,'p_operador','parser.py',247),
  ('funcao -> FUNCTION ID INTEGER BEGIN comandos RETURN expressao SEMICOLON END','funcao',9,'p_funcao','parser.py',282),
  ('fator -> ID LBRACKET RBRACKET','fator',3,'p_chamadaF','parser.py',299),
]
